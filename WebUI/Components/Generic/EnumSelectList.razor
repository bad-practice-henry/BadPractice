@typeparam TEnum where TEnum : struct, Enum;
@inject IStringLocalizer<Constants> Localize;
@using WebUI.Resources.Constants
@inherits WebUI.Components.Generic.Base.BaseInput<TEnum>

<select class="form-select form-select-sm mb-2" @onchange="HandleValueChanged" disabled="@(Enum.GetValues(typeof(TEnum)).Length < 2)">
    @foreach (TEnum option in Enum.GetValues(typeof(TEnum)))
    {
        <option value="@option" selected="@Equals(option, InputValue)">@Localize[option.ToString()]</option>
    }
</select>

@code {

    protected override async Task HandleValueChanged(ChangeEventArgs eventArgs)
    {
        InputValue = Enum.Parse<TEnum>(eventArgs.Value?.ToString() ?? "");
        await ValueChanged.InvokeAsync(InputValue);
    }

}