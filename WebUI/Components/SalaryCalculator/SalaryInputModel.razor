@inject ISalaryCalculationService SalaryCalculationService;
@inject IStringLocalizer<Resources.Components.SalaryInputModel> Localize;
@using Infrastructure.Interfaces
@using ValueType = Application.Constants.ValueType
@using Application.Constants
@using WebUI.Models.SalaryCalculator
@inherits WebUI.Components.Generic.Base.BaseComponent<WebUI.Models.SalaryCalculator.SalaryCalculatorInputModel>

<EnumSelectList TEnum="Country"/>

<NumberInput
    ValueChanged="BaseValue_Changed"
    InputValue="Model.Value"/>

<EnumSelectList
    TEnum="ValueType"
    ValueChanged="InputValueType_Changed"
    InputValue="Model.ValueType"/>

<EnumRadio
    TEnum="Rate"
    ValueChanged="Rate_Changed"
    InputValue="Model.Rate"/>

@if (Model.Rate == Rate.Hourly)
{
    <NumberInput
        ValueChanged="Hours_Changed"
        InputValue="Model.Hours"
        InputGroupText="@Localize[Resources.Components.SalaryInputModel.Hours]"/>
}

<SalaryCalculationOptions
    ValueChanged="SalaryCalculationOptions_Changed"
    Model="Model.SalaryCalculatorOptions"/>


@code {

    protected override async void OnInitialized()
    {
        Model.Hours = await SalaryCalculationService.GetWorkingHoursOfCurrentMonth(Model.Country);
        await base.OnInitializedAsync();
    }

    private async void BaseValue_Changed(decimal value)
    {
        Model.Value = value;
        await OnChange();
    }

    private async Task InputValueType_Changed(ValueType valueType)
    {
        Model.ValueType = valueType;
        await OnChange();
    }

    private async Task Rate_Changed(Rate rate)
    {
        Model.Rate = rate;
        await OnChange();
    }

    private async Task Hours_Changed(decimal value)
    {
        Model.Hours = value;
        await OnChange();
    }

    private async Task SalaryCalculationOptions_Changed(SalaryCalculatorOptionsModel options)
    {
        Model.SalaryCalculatorOptions = options;
        await OnChange();
    }

}