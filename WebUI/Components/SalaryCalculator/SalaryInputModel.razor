@using Infrastructure.Interfaces
@using WebUI.Models.SalaryCalculator
@using ValueType = Application.Constants.ValueType
@using Application.Constants
@using System.Globalization
@inject ISalaryCalculationService SalaryCalculationService;
@inject IStringLocalizer<Resources.Components.SalaryInputModel> Localize;

<EnumSelectList TEnum="Country"/>

<input
    class="form-control form-control-sm mb-2"
    type="number"
    @bind="_inputModel.Value"
    @oninput="BaseValue_Changed"/>

<EnumSelectList TEnum="ValueType" ValueChanged="InputValueType_Changed" SelectedValue="_inputModel.ValueType"/>

<EnumCheckbox TEnum="Rate" ValueChanged="Rate_Changed" SelectedValue="_inputModel.Rate"/>

@if (_inputModel.Rate == Rate.Hourly)
{
    <div class="input-group mb-3">
        <input
            class="form-control form-control-sm"
            type="number"
            @bind="_inputModel.Hours"
            @oninput="Hours_Changed"/>
        <span class="input-group-text">@Localize[Resources.Components.SalaryInputModel.Hours]</span>
    </div>
}


@code {

    [Parameter]
    public EventCallback<SalaryCalculatorInputModel> ValueChanged { get; set; }

    protected override async void OnInitialized()
    {
        _inputModel.Hours = await SalaryCalculationService.GetWorkingHoursOfCurrentMonth(_inputModel.Country);
        await base.OnInitializedAsync();
    }

    private readonly SalaryCalculatorInputModel _inputModel = new()
    {
        Value = 0,
        ValueType = ValueType.Gross,
        Rate = Rate.Monthly,
        Hours = 0,
        Country = Country.EE
    };

    private async Task BaseValue_Changed(ChangeEventArgs obj)
    {
        if (obj.Value is string strValue && !string.IsNullOrEmpty(strValue))
        {
            _inputModel.Value = decimal.Parse(strValue, new NumberFormatInfo { CurrencyDecimalSeparator = "." });
        }
        else
        {
            _inputModel.Value = decimal.Zero;
        }
        await OnChange();
    }

    private async Task InputValueType_Changed(ValueType valueType)
    {
        _inputModel.ValueType = valueType;
        await OnChange();
    }

    private async Task Rate_Changed(Rate rate)
    {
        _inputModel.Rate = rate;
        await OnChange();
    }

    private async Task Hours_Changed(ChangeEventArgs obj)
    {
        if (obj.Value is string strValue && !string.IsNullOrEmpty(strValue))
        {
            _inputModel.Hours = decimal.Parse(strValue, new NumberFormatInfo { CurrencyDecimalSeparator = "." });
        }
        await OnChange();
    }

    private async Task OnChange()
    {
        await ValueChanged.InvokeAsync(_inputModel);
    }

}